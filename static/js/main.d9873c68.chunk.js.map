{"version":3,"sources":["Header.js","Pixi.js","ProgressBar.js","Statistics.js","Vehicle.js","Store.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","this","props","currency","parseFloat","Math","round","speed","toFixed","distance","React","Component","Pixi","resize","parent","app","view","parentNode","renderer","clientWidth","clientHeight","updatePixiContainer","element","pixiContainer","children","length","appendChild","PIXI","autoResize","resolution","devicePixelRatio","window","addEventListener","removeEventListener","ref","ProgressBar","Progress","percent","style","width","maxSpeed","Statistics","floor","time","currentVehicle","type","minSpeed","Vehicle","Store","App","speedUp","bind","state","timer","setInterval","tick","clearInterval","newSpeed","max","newDistance","newTime","newCurrency","setState","min","onClick","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d9873c68.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Header.css';\r\n\r\nexport default class Header extends React.Component{\r\n  render() {\r\n    return (\r\n      <div className=\"component-header\">\r\n        <div className=\"top\">\r\n          <h1>{ this.props.currency } credits</h1>\r\n        </div>\r\n        <div className=\"bottom\">\r\n          <h1>{ parseFloat(Math.round(this.props.speed * 100)/100).toFixed(2) } MPH</h1>\r\n          <h1>{ parseFloat(Math.round(this.props.distance * 100)/100).toFixed(2) } miles</h1>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport * as PIXI from 'pixi.js'\r\nimport './Pixi.css';\r\n\r\nexport default class Pixi extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.pixiContainer = null;\r\n    this.app = new PIXI.Application({\r\n      autoResize: true,\r\n      resolution: devicePixelRatio\r\n    });\r\n  }\r\n  componentDidMount() {\r\n    window.addEventListener('resize', this.resize);\r\n    this.resize();\r\n  }\r\n  componentWillUnmount() {\r\n    window.removeEventListener('resize', this.resize);\r\n  }\r\n  resize = () => {\r\n    const parent = this.app.view.parentNode;\r\n    this.app.renderer.resize(parent.clientWidth, parent.clientHeight);\r\n  }\r\n  updatePixiContainer = element => {\r\n    this.pixiContainer = element;\r\n    if (this.pixiContainer && this.pixiContainer.children.length <= 0) {\r\n      this.pixiContainer.appendChild(this.app.view);\r\n    }\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"component-pixi\" ref={this.updatePixiContainer} />\r\n    );\r\n  }\r\n}","import React from 'react';\r\nimport './ProgressBar.css';\r\n\r\nexport default class ProgressBar extends React.Component{\r\n  render() {\r\n    return(\r\n      <div className=\"component-progress-bar\">\r\n        <Progress percent={this.props.percent}/>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nfunction Progress(props) {\r\n  return <div className=\"progress\" style={{ width: `${props.percent}%` }}/>\r\n}","import React from 'react';\r\nimport './Statistics.css';\r\n\r\nvar maxSpeed = 0;\r\n\r\nexport default class Statistics extends React.Component{\r\n  render() {\r\n    return (\r\n      <div className=\"component-statistics\">\r\n        <h1>Stats</h1>\r\n        <h3>Time Elapsed: { Math.floor(this.props.time) }</h3>\r\n        <h3>Current Vehicle: { this.props.currentVehicle.type }</h3>\r\n        <h3>Vehicle Min Speed: { this.props.currentVehicle.minSpeed } MPH</h3>\r\n        <h3>Vehicle Max Speed: { this.props.currentVehicle.maxSpeed } MPH</h3>\r\n        <h3>All-Time Max Speed: { this.props.speed > maxSpeed ? (maxSpeed = parseFloat(this.props.speed).toFixed(2)) : maxSpeed } MPH</h3>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport './Vehicle.css';\r\n\r\nexport default class Vehicle extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"component-vehicle\">\r\n      \tThis is where the vehicle graphic/blueprint will be.\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport './Store.css';\r\n\r\nexport default class Store extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"component-store\">\r\n      \tThis is where the store will be.\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Header from './Header';\r\nimport Pixi from './Pixi';\r\nimport ProgressBar from './ProgressBar';\r\nimport Statistics from './Statistics';\r\nimport Vehicle from './Vehicle';\r\nimport Store from './Store';\r\n\r\nconst ticksPerSecond = 60;\r\nconst milesToMph = 0.000277778;\r\nconst multiplier = 100;\r\n\r\nexport default class App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.speedUp = this.speedUp.bind(this);\r\n    this.state = {\r\n      currentVehicle: {\r\n        type: 'Bicycle',\r\n        minSpeed: 10,\r\n        maxSpeed: 35\r\n      },\r\n      speed: 0,\r\n      distance: 0,\r\n      time: 0,\r\n      currency: 0\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    this.timer = setInterval(\r\n      () => this.tick(),\r\n      1000 / ticksPerSecond\r\n    );\r\n  }\r\n  componentWillUnmount() {\r\n    clearInterval(this.timer);\r\n  }\r\n  tick() {\r\n    // Speed decay\r\n    let newSpeed = Math.max(this.state.currentVehicle.minSpeed, this.state.speed - (1 / ticksPerSecond));\r\n    // Distance traveled\r\n    let newDistance = this.state.distance + ((this.state.speed * milesToMph) / ticksPerSecond);\r\n    let newTime = this.state.time + (1 / ticksPerSecond);\r\n    let newCurrency = Math.round(newDistance * multiplier);\r\n    this.setState({\r\n      speed: newSpeed,\r\n      distance: newDistance,\r\n      time: newTime,\r\n      currency: newCurrency\r\n    });\r\n  }\r\n  speedUp() {\r\n    this.setState({\r\n      // Add one mph\r\n      speed: Math.min(this.state.currentVehicle.maxSpeed, this.state.speed + 1)\r\n    });\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"component-app\">\r\n        <div className=\"view\" onClick={ this.speedUp }>\r\n          <Header\r\n            speed = { this.state.speed }\r\n            distance = { this.state.distance }\r\n            currency = { this.state.currency }\r\n          />\r\n          <Pixi />\r\n        </div>\r\n        <ProgressBar percent={ (this.state.distance - Math.floor(this.state.distance)) * 100 } />\r\n        <div className=\"menu\">\r\n          <Statistics\r\n            currentVehicle = { this.state.currentVehicle }\r\n            speed = { this.state.speed }\r\n            distance = { this.state.distance }\r\n            time = { this.state.time }\r\n          />\r\n          <Vehicle\r\n            currentVehicle = { this.state.currentVehicle }\r\n          />\r\n          <Store\r\n            distance = { this.state.distance }\r\n            currency = { this.state.currency }\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}