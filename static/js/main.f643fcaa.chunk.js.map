{"version":3,"sources":["Statistics.js","Pixi.js","App.js","serviceWorker.js","index.js"],"names":["Statistics","props","state","currentVehicle","type","minSpeed","maxSpeed","speed","distance","time","ticksPerSecond","this","timerID","setInterval","tick","clearInterval","Math","max","setState","className","parseFloat","round","toFixed","React","Component","Pixi","resize","parent","app","view","parentNode","renderer","clientWidth","clientHeight","updatePixiContainer","element","pixiContainer","children","length","appendChild","PIXI","autoResize","resolution","devicePixelRatio","window","addEventListener","removeEventListener","ref","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0SAGqBA,G,wBACnB,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,eAAgB,CACdC,KAAM,UACNC,SAAU,GACVC,SAAU,IAEZC,MAAO,EACPC,SAAU,EACVC,KAAM,EACNC,eAAgB,IAXD,E,iFAcE,IAAD,OAClBC,KAAKC,QAAUC,aACb,kBAAM,EAAKC,SACX,IAAOH,KAAKT,MAAMQ,kB,6CAIpBK,cAAcJ,KAAKC,W,6BAGnB,IAEIL,EAAQS,KAAKC,IAAIN,KAAKT,MAAMC,eAAeE,SAAUM,KAAKT,MAAMK,MAAS,EAAII,KAAKT,MAAMQ,gBAExFF,EAAWG,KAAKT,MAAMM,SAJP,UAIoBG,KAAKT,MAAMK,MAAsBI,KAAKT,MAAMQ,eAC/ED,EAAOE,KAAKT,MAAMO,KAAQ,EAAIE,KAAKT,MAAMQ,eAC7CC,KAAKO,SAAS,CACZX,MAAOA,EACPC,SAAUA,EACVC,KAAMA,M,+BAIR,OACE,yBAAKU,UAAU,wBACb,4BAAMR,KAAKT,MAAMC,eAAeC,MAChC,sCAAagB,WAAWJ,KAAKK,MAAyB,IAAnBV,KAAKT,MAAMK,OAAa,KAAKe,QAAQ,GAAxE,QACA,yCAAgBF,WAAWJ,KAAKK,MAA4B,IAAtBV,KAAKT,MAAMM,UAAgB,KAAKc,QAAQ,GAA9E,UACA,qCAAYF,WAAWJ,KAAKK,MAAwB,IAAlBV,KAAKT,MAAMO,MAAc,KAAKa,QAAQ,S,GA3CxCC,IAAMC,Y,QCCzBC,G,kBACnB,WAAYxB,GAAQ,IAAD,8BACjB,4CAAMA,KAcRyB,OAAS,WACP,IAAMC,EAAS,EAAKC,IAAIC,KAAKC,WAC7B,EAAKF,IAAIG,SAASL,OAAOC,EAAOK,YAAaL,EAAOM,eAjBnC,EAmBnBC,oBAAsB,SAAAC,GACpB,EAAKC,cAAgBD,EACjB,EAAKC,eAAiB,EAAKA,cAAcC,SAASC,QAAU,GAC9D,EAAKF,cAAcG,YAAY,EAAKX,IAAIC,OApB1C,EAAKO,cAAgB,KACrB,EAAKR,IAAM,IAAIY,IAAiB,CAC9BC,YAAY,EACZC,WAAYC,mBALG,E,iFASjBC,OAAOC,iBAAiB,SAAUlC,KAAKe,QACvCf,KAAKe,W,6CAGLkB,OAAOE,oBAAoB,SAAUnC,KAAKe,U,+BAa1C,OACE,yBAAKP,UAAU,iBAAiB4B,IAAKpC,KAAKuB,0B,GA5BdX,IAAMC,YCCnBwB,E,iLAEjB,OACE,yBAAK7B,UAAU,iBACb,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GALyBI,IAAMC,WCOnByB,QACW,cAA7BL,OAAOM,SAASC,UAEe,UAA7BP,OAAOM,SAASC,UAEhBP,OAAOM,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.f643fcaa.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Statistics.css';\r\n\r\nexport default class Statistics extends React.Component{\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      currentVehicle: {\r\n        type: 'Bicycle',\r\n        minSpeed: 10,\r\n        maxSpeed: 35\r\n      },\r\n      speed: 0,\r\n      distance: 0,\r\n      time: 0,\r\n      ticksPerSecond: 60\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    this.timerID = setInterval(\r\n      () => this.tick(),\r\n      1000 / this.state.ticksPerSecond\r\n    );\r\n  }\r\n  componentWillUnmount() {\r\n    clearInterval(this.timerID);\r\n  }\r\n  tick() {\r\n    const milesToMph = 0.000277778;\r\n    // Speed decay\r\n    let speed = Math.max(this.state.currentVehicle.minSpeed, this.state.speed - (1 / this.state.ticksPerSecond));\r\n    // Travel more distance\r\n    let distance = this.state.distance + ((this.state.speed * milesToMph) / this.state.ticksPerSecond);\r\n    let time = this.state.time + (1 / this.state.ticksPerSecond);\r\n    this.setState({\r\n      speed: speed,\r\n      distance: distance,\r\n      time: time\r\n    });\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"component-statistics\">\r\n        <h1>{ this.state.currentVehicle.type }</h1>\r\n        <h1>Speed: { parseFloat(Math.round(this.state.speed * 100)/100).toFixed(2) } MPH</h1>\r\n        <h2>Distance: { parseFloat(Math.round(this.state.distance * 100)/100).toFixed(2) } Miles</h2>\r\n        <h2>Time: { parseFloat(Math.round(this.state.time * 100) / 100).toFixed(2) }</h2>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport * as PIXI from 'pixi.js'\r\nimport './Pixi.css';\r\n\r\nexport default class Pixi extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.pixiContainer = null;\r\n    this.app = new PIXI.Application({\r\n      autoResize: true,\r\n      resolution: devicePixelRatio\r\n    });\r\n  }\r\n  componentDidMount() {\r\n    window.addEventListener('resize', this.resize);\r\n    this.resize();\r\n  }\r\n  componentWillUnmount() {\r\n    window.removeEventListener('resize', this.resize);\r\n  }\r\n  resize = () => {\r\n    const parent = this.app.view.parentNode;\r\n    this.app.renderer.resize(parent.clientWidth, parent.clientHeight);\r\n  }\r\n  updatePixiContainer = element => {\r\n    this.pixiContainer = element;\r\n    if (this.pixiContainer && this.pixiContainer.children.length <= 0) {\r\n      this.pixiContainer.appendChild(this.app.view);\r\n    }\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"component-pixi\" ref={this.updatePixiContainer} />\r\n    );\r\n  }\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport Statistics from './Statistics';\r\nimport Pixi from './Pixi';\r\n\r\nexport default class App extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"component-app\">\r\n        <Statistics />\r\n        <Pixi />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}